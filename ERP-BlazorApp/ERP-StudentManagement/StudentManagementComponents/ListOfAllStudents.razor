 @using ERP_StudentManagement.DTOs.Response
@using System.Net.Http.Json
@using MudBlazor
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<h3>Faculty Of Engineering , University Of Ruhuna Student's List </h3>


<MudTable Items="@_student" Class="custom-table">
    <HeaderContent>
        <MudTh>RegNo</MudTh>
        <MudTh>Full Name</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Department</MudTh>
        <MudTh>NationalId</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="RegNo">@context.RegistrationNumber</MudTd>
        <MudTd DataLabel="FullName">@context.FullName</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Department">@context.Department</MudTd>
        <MudTd DataLabel="NationalID">@context.NationalId</MudTd>
        <MudTd DataLabel="Actions">
            <div class="button-group">
                <MudFab Color="Color.Secondary" OnClick="@(()=>ShowStudent(context.StudentID))"
                        StartIcon="@Icons.Material.Filled.Person" Size="Size.Small" />
                <MudFab Color="Color.Primary" OnClick="@(() => EditStudent(context.StudentID))"
                        StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" />
                <MudFab Color="Color.Warning" OnClick="@(()=>DeleteStudent(context.StudentID))"
                        StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" />
            </div>

        </MudTd>


    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<style>
        /* Styles for h3 heading */
        h3 {
            margin-top: 20px;
            margin-bottom: 20px;
            text-align: center;
            font-size: 24px;
            font-weight: bold;
            color: #333;
        }

        /* Styles for MudTable */
        .custom-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

            .custom-table th, .custom-table td {
                border: 1px solid #ddd;
                padding: 8px;
            }

            .custom-table th {
                background-color: #f6efef;
                color: #000000;
                font-size: large;
                font-weight: 600;
                font-family: sans-serif;
            }

            .custom-table td {
                background-color: white;
                color: #000000;
            }

        font-weight: bold;
        }
</style>



<MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
    <MessageContent>
        Are You Sure to Delete This Student!
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
    </YesButton>
</MudMessageBox>




@code {

    private string buttonGroupStyle = "display: flex; gap: 8px;";

    MudMessageBox mbox { get; set; }

    public EventCallback onDelete { get; set; }

    private HttpClient Http = new HttpClient();

    private List<GetStudentsResponse> _student = new List<GetStudentsResponse>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _student = await Http.GetFromJsonAsync<List<GetStudentsResponse>>("https://localhost:7055/api/StudentManagement");
        }
        catch (Exception ex)
        {
            _student = null;
        }
    }

    async Task DeleteStudent(Guid studentId)
    {
        bool? result = await mbox.Show();
        if (result == true)
        {
            var response = await Http.DeleteAsync($"https://localhost:7055/api/StudentManagement/{studentId}");
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Student Deleted Successfully", Severity.Success);
                _student = await Http.GetFromJsonAsync<List<GetStudentsResponse>>("https://localhost:7055/api/StudentManagement");
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Connection error. Student is not deleted.", Severity.Error);
            }

        }
        else
        {
            Snackbar.Add("Student is Not Deleted", Severity.Info);
        }

    }

    async Task EditStudent(Guid studentId)
    {
        var parameters = new DialogParameters<EditeStudentDialog> { { x => x.studentId, studentId } };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true,
                Position = DialogPosition.CenterLeft,
                CloseOnEscapeKey = true,
                CloseButton = true
            };

        var dialog = await DialogService.ShowAsync<EditeStudentDialog>("Save", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            _student = await Http.GetFromJsonAsync<List<GetStudentsResponse>>("https://localhost:7055/api/StudentManagement");
        }


    }




    async Task ShowStudent(Guid studentId)
    {
        var parameters = new DialogParameters<StudentProfileDialog> { { x => x.studentId, studentId } };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true,
                Position = DialogPosition.Center,
                CloseOnEscapeKey = true,
                CloseButton = true
            };

        var dialog = await DialogService.ShowAsync<StudentProfileDialog>("Student Profile", parameters, options);

    }






  }

 
