@using ERP_StudentManagement.DTOs.Response
@using System.Net.Http.Json
@using MudBlazor
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar




<MudGrid>
    <div class="department-tabs">
        @foreach (var department in departmentList)
        {
            <div class="@($"department-tab {(department == selectedDepartment ? "active" : "")}")" @onclick="() => SelectDepartment(department)">
                @department
            </div>
        }
    </div>

</MudGrid>

@if (!string.IsNullOrEmpty(selectedDepartment))
{
    <h3>Students in @selectedDepartment</h3>
    <MudTable Class="custom-table" Items="@(GetStudentsByDepartment(selectedDepartment))">
        <HeaderContent>
            <MudTh>RegNo</MudTh>
            <MudTh>Full Name</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Department</MudTh>
            <MudTh>NationalId</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="RegNo">@context.RegistrationNumber</MudTd>
                <MudTd DataLabel="FullName">@context.FullName</MudTd>
                <MudTd DataLabel="Email">@context.Email</MudTd>
                <MudTd DataLabel="Department">@context.Department</MudTd>
                <MudTd DataLabel="NationalID">@context.NationalId</MudTd>
                <MudTd DataLabel="Actions">
                    <div class="button-group">
                        <MudFab Color="Color.Secondary" OnClick="@(() => ShowStudent(context.StudentID))" StartIcon="@Icons.Material.Filled.Person" Size="Size.Small" />
                        <MudFab Color="Color.Primary" OnClick="@(() => EditStudent(context.StudentID))" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" />
                        <MudFab Color="Color.Warning" OnClick="@(() => DeleteStudent(context.StudentID))" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" />
                    </div>
                </MudTd>
            </RowTemplate>
        </MudTable>

}
else
{
    <div class="no-department-selected">
        <p>Please select a department to view students.</p>
    </div>
}


<MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
    <MessageContent>
        Are You Sure to Delete This Student!
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
    </YesButton>
</MudMessageBox>



@code {
    private string buttonGroupStyle = "display: flex; gap: 8px;";
    MudMessageBox mbox { get; set; }
    public EventCallback onDelete { get; set; }
    private HttpClient Http = new HttpClient();
    private List<GetStudentsResponse> _student = new List<GetStudentsResponse>();

    private List<string> departmentList = new List<string>
    {   "Frist Year",
        "Computer Department",
        "Electrical Department",
        "Civil Department",
        "Mechanical Department",
        "Merain Engineering"
    };

    private string selectedDepartment = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _student = await Http.GetFromJsonAsync<List<GetStudentsResponse>>("https://localhost:7055/api/StudentManagement");
        }
        catch (Exception ex)
        {
            _student = null;
            Snackbar.Add("Error fetching student data: " + ex.Message, Severity.Error);
        }
    }

    private List<GetStudentsResponse> GetStudentsByDepartment(string department)
    {
        return _student.Where(s => s.Department == department).ToList();
    }

    private void SelectDepartment(string department)
    {
        selectedDepartment = department;
    }

    private string GetDepartmentImage(string department)
    {
        return department switch
        {
            "First Year" => "/images/first-year.jpg",
            "Computer Department" => "/images/computer-department.jpg",
            "Electrical Department" => "/images/electrical-department.jpg",
            "Civil Department" => "/images/civil-department.jpg",
            "Mechanical Department" => "/images/mechanical-department.jpg",
            "Marine Engineering" => "/images/marine-engineering.jpg",
            _ => "/images/default.jpg" // Provide a default image path if department name doesn't match
        };
    }

    async Task DeleteStudent(Guid studentId)
    {
        bool? result = await mbox.Show();
        if (result == true)
        {
            var response = await Http.DeleteAsync($"https://localhost:7055/api/StudentManagement/{studentId}");
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Student Deleted Successfully", Severity.Success);
                _student = await Http.GetFromJsonAsync<List<GetStudentsResponse>>("https://localhost:7055/api/StudentManagement");
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Connection error. Student is not deleted.", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Student is Not Deleted", Severity.Info);
        }
    }

    async Task EditStudent(Guid studentId)
    {
        var parameters = new DialogParameters<EditeStudentDialog> { { x => x.studentId, studentId } };
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true,
                Position = DialogPosition.CenterLeft,
                CloseOnEscapeKey = true,
                CloseButton = true
            };
        var dialog = await DialogService.ShowAsync<EditeStudentDialog>("Edit Student", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            _student = await Http.GetFromJsonAsync<List<GetStudentsResponse>>("https://localhost:7055/api/StudentManagement");
        }
    }

    async Task ShowStudent(Guid studentId)
    {
        var parameters = new DialogParameters<StudentProfileDialog> { { x => x.studentId, studentId } };
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true,
                Position = DialogPosition.Center,
                CloseOnEscapeKey = true,
                CloseButton = true
            };
        await DialogService.ShowAsync<StudentProfileDialog>("Student Profile", parameters, options);
    }
} 







<style>
    .department-tabs {
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: #f0f0f0;
        padding: 10px 0;
        margin-bottom: 20px;
        margin-top: 20px;
    }

    .department-tab {
        padding: 10px 20px;
        margin: 0 5px;
        cursor: pointer;
        border: 2px solid transparent;
        border-radius: 5px;
        font-size: 18px;
        font-weight: bold;
        color: #333;
        transition: all 0.3s ease;
    }

    .department-tab:hover {
        background-color: #ddd;
    }

    .department-tab.active {
        background-color: #007bff;
        color: white;
        border-color: #007bff;
    }

    .department-cards .row {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

    .department-card {
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 15px;
        margin: 10px;
        width: 100%;
        transition: all 0.3s ease;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .department-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    }

    .card-content {
        text-align: center;
    }

    .department-name {
        font-size: 20px;
        font-weight: bold;
        color: #333;
    }

    .button-group {
        display: flex;
        gap: 8px;
        justify-content: center;
        margin-top: 10px;
    }

    /* Styles for h3 heading */
    h3 {
        margin-top: 20px;
        margin-bottom: 20px;
        text-align: center;
        font-size: 24px;
        font-weight: bold;
        color: #333;
    }

    /* Styles for MudTable */
    .custom-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

        .custom-table th, .custom-table td {
            border: 1px solid #ddd;
            padding: 8px;
        }

        .custom-table th {
            background-color: #f6efef;
            color: #000000;
            font-size: large;
            font-weight: 600;
            font-family: sans-serif;
        }

        .custom-table td {
            background-color: white;
            color: #000000;
        }

      font-weight: bold;
    }
</style>

