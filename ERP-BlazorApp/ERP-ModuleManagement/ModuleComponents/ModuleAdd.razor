@using ERP_ModuleManagement.DTOs.Request
@using MudBlazor
@using FluentValidation
@using System.Net.Http.Json;
@using System.Text;
@using System.Text.Json;
@inject ISnackbar Snackbar
@implements IDisposable

<div class="home">
    <div class="form-container">
        <MudContainer>
            <h3 class="text-center mb-4">Module Add Page</h3>

            <MudCard>
                <MudCardContent>
                    <MudForm Model="@model" @ref="@form"
                             Validation="@(moduleValidator.ValidateValue)"
                             ValidationDelay="0"
                             Colour="Color.Primary">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="model.ModuleName"
                                              Label="Module Name"
                                              Required="true"
                                              For="@(()=>model.ModuleName)" />
                            </MudItem>

                            <MudItem xs="12">
                                <MudTextField @bind-Value="model.ModuleCode"
                                              Label="Module Code"
                                              Required="true"
                                              For="@(()=>model.ModuleCode)" />
                            </MudItem>

                            <MudItem xs="12">
                                <MudSelect Label="Semester" @bind-Value="@model.Semester">
                                    @foreach (var option in semesterlist)
                                    {
                                        <MudSelectItem Value="option">@option</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>

                            <MudItem xs="12">
                                <MudTextField @bind-Value="model.ModuleCoordineter"
                                              Label="Module Coordinator"
                                              Required="true"
                                              For="@(()=>model.ModuleCoordineter)" />
                            </MudItem>

                            <MudItem xs="12">
                                <MudTextField @bind-Value="model.Lectures"
                                              Label="Lecturer"
                                              Required="true"
                                              For="@(()=>model.Lectures)" />
                            </MudItem>
                        </MudGrid>
                    </MudForm>
                </MudCardContent>

                <MudCardActions>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Class="ml-auto"
                               OnClick="@(async () => await Submit())">Add</MudButton>
                </MudCardActions>
            </MudCard>
        </MudContainer>
    </div>

    <div class="right-column">
        <MudCarousel Class="mud-width-full" Style="height:200px;" AutoCycle="@autocycle" TData="object">
            <MudCarouselItem Transition="transition" Color="@Color.Primary">
                <div class="d-flex position-relative" style="height:100%; width:100%;">
                    <img src="https://docs.fohss.lk/storage/0dbd61057a19f1d42453a7ecc60d299c/0dbd61057a19f1d42453a7ecc60d299c/207c48c4885718c049c55e6ea58a0441.jpg" alt="Image 1" style="object-fit:cover; width:100%; height:100%;" />
                </div>
            </MudCarouselItem>
            <MudCarouselItem Transition="transition" Color="@Color.Secondary">
                <div class="d-flex" style="height:100%; width:100%;">
                    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQZjo92OcdaC1p1Dk3wlYMPpC3G9aGow4ofDmUsxDvBDsTMStpPU7IrpSMvC7rHhcdnxmM&usqp=CAU" alt="Image 1" style="object-fit:cover; width:100%; height:100%;" />
                </div>
            </MudCarouselItem>
            <MudCarouselItem Transition="transition">
                <div class="d-flex" style="height:100%; width:100%;">
                    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTj4aRb3L0WiXE9y9AbOW1HU33lGPQlshGx-g&s" alt="Image 1" style="object-fit:cover; width:100%; height:100%;" />
                </div>
            </MudCarouselItem>
        </MudCarousel>
        <MudDatePicker Class="mb-5" PickerVariant="PickerVariant.Static" Rounded="true" Elevation="12" Date="DateTime.Today" />
    </div>
</div>



@code {

    private bool autocycle = true;
    private Transition transition = Transition.Slide;

    private bool arrows = true;
    private bool bullets = true;
    private bool enableSwipeGesture = true;
   

    [Parameter]
    public EventCallback onAdded { get; set; }

    private HttpClient Http = new HttpClient();

    private CreateModuleRequest model = new CreateModuleRequest();

    ModuleModelValidator moduleValidator = new ModuleModelValidator();
    MudForm form;

    private Timer timer;

    TimeSpan? time = new TimeSpan(00, 45, 00);

    protected override void OnInitialized()
    {
        timer = new Timer(UpdateRealTime, null, 0, 1000); // Update every second
    }

    private void UpdateRealTime(object state)
    {
        time = DateTime.Now.TimeOfDay;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    public class ModuleModelValidator : AbstractValidator<CreateModuleRequest>
    {
        public ModuleModelValidator()
        {
            RuleFor(x => x.ModuleName)
                .NotEmpty().WithMessage("Module Name is Required.")
                .MinimumLength(3)
                .MaximumLength(20);

            RuleFor(x => x.ModuleCode)
                .NotEmpty().WithMessage("Module Code is Required.")
                .MinimumLength(3)
                .MaximumLength(20);

            RuleFor(x => x.Semester)
                .NotEmpty().WithMessage("Semester is Required.");

            RuleFor(x => x.ModuleCoordineter)
                .NotEmpty().WithMessage("Module Coordinator is Required.")
                .MinimumLength(3)
                .MaximumLength(20);

            RuleFor(x => x.Lectures)
                .NotEmpty().WithMessage("Lectures is Required.")
                .MinimumLength(3)
                .MaximumLength(20);
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<CreateModuleRequest>
                .CreateWithOptions((CreateModuleRequest)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

    private async Task Submit()
    {
        await form.Validate();
        try
        {
            if (form.IsValid)
            {
                var jsonModel = JsonSerializer.Serialize(model);
                var content = new StringContent(jsonModel, Encoding.UTF8, "application/json");
                var response = await Http.PostAsync("https://localhost:7103/api/Module", content);

                if (response.IsSuccessStatusCode)
                {
                    await onAdded.InvokeAsync();
                    form.Reset();
                    Snackbar.Add("Module Added Successfully", MudBlazor.Severity.Success);
                }
                else
                {
                    Snackbar.Add("Please Check Your Connection.", MudBlazor.Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Please Check Input Fields", MudBlazor.Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", MudBlazor.Severity.Error);
        }
    }

    private List<string> semesterlist = new List<string> { "Semester 01", "Semester 02", "Semester 03", "Semester 04", "Semester 05", "Semester 06", "Semester 07", "Semester 08" };
}

<style>
    .home {
        display: flex;
        gap: 20px; /* Add some space between the items */
    }

    .form-container {
        flex: 1; /* Take up available space */
    }

    .right-column {
        display: flex;
        flex-direction: column;
        gap: 20px;
        flex: 0 0 300px; /* Fixed width for the right column */
        max-width: 300px;
    }

    .calendar {
        background-color: #ffffff; /* White background */
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .carousel {
        background-color: #ffffff; /* White background */
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    /* Make sure the calendar fits nicely */
    .mud-picker-static {
        width: 100%;
    }

   /*  .button-group {
        buttonGroupStyle;
    } */
</style>
