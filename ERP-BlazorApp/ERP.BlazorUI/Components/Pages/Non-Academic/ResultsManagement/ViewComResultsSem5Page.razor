@page "/ComResultsListSem5"
@rendermode InteractiveServer
@using ERP_ResultManagement.DTOs.Responses
@using System.Net.Http.Json
@using MudBlazor
@using Microsoft.AspNetCore.Components.Forms

@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject HttpClient Http

<MudPopoverProvider />
<MudSnackbarProvider />

<div style="text-align: center; margin-bottom: 0;">
    <h2><u>COM SEMESTER 5 RESULTS LIST</u></h2>
</div>


<MudTable Items="@_comresults" Class="custom-table">
    <HeaderContent>

        <MudTh>Full Name</MudTh>
        <MudTh>CE0017</MudTh>
        <MudTh>CE0018</MudTh>
        <MudTh>CE0019</MudTh>
        <MudTh>CE0020</MudTh>
        <MudTh>Action</MudTh>

    </HeaderContent>

    <RowTemplate>

        <MudTd DataLabel="fullname">@context.StudentName</MudTd>
        <MudTd DataLabel="ce0005">@context.CE0005</MudTd>
        <MudTd DataLabel="ce0006">@context.CE0006</MudTd>
        <MudTd DataLabel="ce0007">@context.CE0007</MudTd>
        <MudTd DataLabel="ce0008">@context.CE0008</MudTd>
        <MudTd DataLabel="Actions">
            <div class="button-group">

                <MudFab Color="Color.Warning" OnClick="@(()=>DeleteResult(context.ComId))"
                        StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" />
            </div>

        </MudTd>


    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<MudButton OnClick="NavigateADD" Variant="Variant.Filled" Color="Color.Primary" Class="custom-back-button">
    <MudIcon Icon="Icons.Material.Filled.ArrowBack" />
    Back To ADD
</MudButton>


<MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
    <MessageContent>
        Deleting can <b><i>not</i></b> be undone!
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
    </YesButton>
</MudMessageBox>


<style>
    .custom-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    .custom-back-button {
        margin: 10px;
        padding: 10px;
        font-size: 16px;
        background-color: #3f51b5; /* Primary color */
        color: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        display: flex;
        align-items: center;
    }

        .custom-back-button .mud-icon-root {
            margin-right: 5px;
        }

    .custom-table th, .custom-table td {
        border: 1px solid #ddd;
        padding: 8px;
    }

    .custom-table th {
        background-color: #f6efef;
        color: #000000;
        font-size: large;
        font-weight: 600;
        font-family: sans-serif;
    }

    .custom-table td {
        background-color: #54a3c2;
        color: #000000;
    }
</style>


@code {
    private string buttonGroupStyle = "display: flex; gap: 8px;";

    public EventCallback onDelete { get; set; }

    private List<GetComResultsResponse> _comresults = new List<GetComResultsResponse>();

    MudMessageBox mbox { get; set; }

    private void NavigateADD()
    {
        NavigationManager.NavigateTo("/ComResultsSem5");

    }


    async Task DeleteResult(Guid comId)
    {
        // bool? result = await mbox.Show();
        // if (result == true)
        // {
        //     var response = await Http.DeleteAsync($"https://localhost:7186/api/ComResults/{comId}");
        //     if (response.IsSuccessStatusCode)
        //     {
        //         Snackbar.Add("Result Deleted Successfully", Severity.Success);
        //         _comresults = await Http.GetFromJsonAsync<List<GetComResultsResponse>>("https://localhost:7186/api/ComResults");
        //         StateHasChanged();
        //     }
        //     else
        //     {
        //         Snackbar.Add("Connection error. Result is not deleted.", Severity.Error);
        //     }

        // }
        // else
        // {
        //     Snackbar.Add("Result is Not Deleted", Severity.Info);
        // }

        var response = await Http.DeleteAsync($"https://localhost:7186/api/ComResults/{comId}");
        // OnInitializedAsync();
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Result Deleted Successfully", Severity.Success);
            _comresults = await Http.GetFromJsonAsync<List<GetComResultsResponse>>("https://localhost:7186/api/ComResults");
            StateHasChanged();
        }
        else
        {
            Snackbar.Add("Connection error. Result is not deleted.", Severity.Error);
        }


    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _comresults = await Http.GetFromJsonAsync<List<GetComResultsResponse>>("https://localhost:7186/api/ComResults");
        }
        catch (Exception ex)
        {
            _comresults = null;
        }
    }




}
