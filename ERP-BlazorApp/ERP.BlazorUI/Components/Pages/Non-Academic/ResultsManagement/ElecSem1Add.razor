
@page "/ElecResultsSem1"
@using ERP_ResultManagement.DTOs.Requests
@using FluentValidation
@using System.IO
@using MudBlazor
@using Microsoft.AspNetCore.Components.Forms
@using ClosedXML.Excel
@using System.Net.Http.Json
@using System.Text
@using System.Text.Json

@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject HttpClient Http

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Semester 1" OnClick="@(() => Navigation.NavigateTo("/ElecResultsSem1"))">
    </MudTabPanel>
    <MudTabPanel Text="Semester 2" OnClick="@(() => Navigation.NavigateTo("/ElecResultsSem2"))">
    </MudTabPanel>
    <MudTabPanel Text="Semester 3" OnClick="@(() => Navigation.NavigateTo("/ElecResultsSem3"))">
    </MudTabPanel>
    <MudTabPanel Text="Semester 4" OnClick="@(() => Navigation.NavigateTo("/ElecResultsSem4"))">
    </MudTabPanel>
    <MudTabPanel Text="Semester 5" OnClick="@(() => Navigation.NavigateTo("/ElecResultsSem5"))">
    </MudTabPanel>
    <MudTabPanel Text="Semester 6" OnClick="@(() => Navigation.NavigateTo("/ElecResultsSem6"))">
    </MudTabPanel>
    <MudTabPanel Text="Semester 7" OnClick="@(() => Navigation.NavigateTo("/ElecResultsSem7"))">
    </MudTabPanel>
    <MudTabPanel Text="Semester 8" OnClick="@(() => Navigation.NavigateTo("/ElecResultsSem8"))">
    </MudTabPanel>
</MudTabs>

<style>
    h2 {
        text-align: center;
        font-weight: bold;
        text-decoration: underline;
        margin-bottom: 20px;
    }
    h5 {
        text-align: center;
        font-weight: bold;
        margin-bottom: 20px;
    }

    .btn-primary {
        background-color: #007bff;
        border: none;
        color: white;
        padding: 10px 20px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 10px 2px;
        cursor: pointer;
        border-radius: 4px;
        transition-duration: 0.4s;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

        .btn-primary:hover {
            background-color: #0056b3;
            color: white;
        }

    .btn-secondary {
        background-color: #6c757d;
        border: none;
        color: white;
        padding: 10px 20px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 10px 2px;
        cursor: pointer;
        border-radius: 4px;
        transition-duration: 0.4s;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

        .btn-secondary:hover {
            background-color: #5a6268;
            color: white;
        }

    .my-custom-card {
        max-width: 800px;
        margin: auto;
        padding: 50px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: #f8f9fa; /* Light gray background */
        border: 1px solid #ced4da; /* Gray border */
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .text-center {
        text-align: center;
    }

    .mt-3 {
        margin-top: 1rem;
    }


    .my-custom-card {
        max-width: 800px;
        margin: auto;
        padding: 50px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: #f8f9fa; /* Light gray background */
        border: 1px solid #ced4da; /* Gray border */
    }
   
</style>

<h2><c>DEIE RESULTS</c></h2>

<MudCard Class="my-custom-card">
    <h5><c>ADD LECTURERS FROM EXCEL</c></h5>
    <InputFile @ref="fileInput" OnChange="HandleFileUpload" />
    <MudButton class=" btn-primary" Variant="Variant.Filled" Color="Color.Primary" Style="width:auto" @onclick="SaveAllResults">SAVE</MudButton>
  @*   @if (elecResults != null && elecResults.Any())
    {
        <MudButton class="btn btn-primary" Variant="Variant.Filled" Color="Color.Primary" Style="width:auto" @onclick="SaveAllResults">Save All Results</MudButton>
    } *@
</MudCard>

<div class="text-center mt-3">
    <button class="btn btn-secondary" @onclick="ViewResults">View Results</button>
</div>

@code {
    private string successMessage;
    private string errorMessage;
    private InputFile fileInput;
    private string uploadError;
    private List<CreateDeieResultsRequest> elecResults;

    [Parameter]
    public EventCallback onAdded { get; set; }

    private CreateDeieResultsRequest model = new CreateDeieResultsRequest();
    private MudForm form;

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            try
            {
                elecResults = await ReadResultsFromExcel(file);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error uploading file: {ex.Message}", MudBlazor.Severity.Error);
            }
        }
    }

    public async Task<List<CreateDeieResultsRequest>> ReadResultsFromExcel(IBrowserFile file)
    {
        var results = new List<CreateDeieResultsRequest>();

        using (var memoryStream = new MemoryStream())
        {
            await file.OpenReadStream().CopyToAsync(memoryStream);
            memoryStream.Position = 0;

            using (var workbook = new XLWorkbook(memoryStream))
            {
                var worksheet = workbook.Worksheets.FirstOrDefault();

                if (worksheet != null)
                {
                    foreach (var row in worksheet.RowsUsed().Skip(1)) // Skip header row
                    {
                        var model = new CreateDeieResultsRequest
                            {
                                DEIEid = row.Cell(1).GetValue<int>(),
                                StudentName = row.Cell(2).GetValue<string>(),
                                EE0001 = row.Cell(3).GetValue<string>(),
                                EE0002 = row.Cell(4).GetValue<string>(),
                                EE0003 = row.Cell(5).GetValue<string>(),
                                EE0004 = row.Cell(6).GetValue<string>(),
                                EE0005 = row.Cell(7).GetValue<string>(),
                                EE0006 = row.Cell(8).GetValue<string>(),
                                EE0007 = row.Cell(9).GetValue<string>(),
                                EE0008 = row.Cell(10).GetValue<string>(),
                                EE0009 = row.Cell(11).GetValue<string>(),
                                EE0010 = row.Cell(12).GetValue<string>(),
                                EE0011 = row.Cell(13).GetValue<string>(),
                                EE0012 = row.Cell(14).GetValue<string>(),
                            };
                        results.Add(model);
                    }
                }
            }
        }

        return results;
    }

    private async Task SaveAllResults()
    {
        if (elecResults != null && elecResults.Any())
        {
            bool allResultsSaved = true;

            foreach (var elecResult in elecResults)
            {
                try
                {
                    var jsonModel = JsonSerializer.Serialize(elecResult);
                    var content = new StringContent(jsonModel, Encoding.UTF8, "application/json");
                    var response = await Http.PostAsync("https://localhost:7186/api/DeieResults", content);

                    if (!response.IsSuccessStatusCode)
                    {
                        await onAdded.InvokeAsync();
                    }
                }
                catch (Exception ex)
                {
                    allResultsSaved = false;
                    Snackbar.Add($"Error saving result: {ex.Message}", MudBlazor.Severity.Error);
                }
            }

            if (allResultsSaved)
            {
                Snackbar.Add("All Results saved successfully", MudBlazor.Severity.Success);
                await Task.Delay(1500);
            }
        }

        Snackbar.Add("All Results processed", MudBlazor.Severity.Success);
    }

    private void ViewResults()
    {
        Navigation.NavigateTo("/ElecResultsList1");
    }
}
